version: '3.8'

services:

  nginx:
    image: nginx:latest
    container_name: nginx-lb
    ports:
      - "8000:80"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
    depends_on:
      - api-1
      - api-2
      - api-3
    networks:
      - backend

  api-1:
    build:
      context: ./Gateway
    container_name: spring-api-1
    restart: always
    depends_on:
      - haproxy
    networks:
      - backend
    environment:
      SPRING_DATASOURCE_URL: jdbc:postgresql://haproxy:26256/appdb?sslmode=disable
      SPRING_DATASOURCE_USERNAME: root
      SPRING_JPA_HIBERNATE_DDL_AUTO: update
      SPRING_JPA_SHOW_SQL: "true"
      SPRING_DATA_REDIS_CLUSTER_NODES: redis-node-1:6379,redis-node-2:6379,redis-node-3:6379
      SPRING_RABBITMQ_HOST: haproxy-rabbitmq
      SPRING_RABBITMQ_PORT: 5672

  api-2:
    build:
      context: ./Gateway
    container_name: spring-api-2
    restart: always
    depends_on:
      - haproxy
    networks:
      - backend
    environment:
      SPRING_DATASOURCE_URL: jdbc:postgresql://haproxy:26256/appdb?sslmode=disable
      SPRING_DATASOURCE_USERNAME: root
      SPRING_JPA_HIBERNATE_DDL_AUTO: update
      SPRING_JPA_SHOW_SQL: "true"
      SPRING_DATA_REDIS_CLUSTER_NODES: redis-node-1:6379,redis-node-2:6379,redis-node-3:6379
      SPRING_RABBITMQ_HOST: haproxy-rabbitmq
      SPRING_RABBITMQ_PORT: 5672

  api-3:
    build:
      context: ./Gateway
    container_name: spring-api-3
    restart: always
    depends_on:
      - haproxy
    networks:
      - backend
    environment:
      SPRING_DATASOURCE_URL: jdbc:postgresql://haproxy:26256/appdb?sslmode=disable
      SPRING_DATASOURCE_USERNAME: root
      SPRING_JPA_HIBERNATE_DDL_AUTO: update
      SPRING_JPA_SHOW_SQL: "true"
      SPRING_DATA_REDIS_CLUSTER_NODES: redis-node-1:6379,redis-node-2:6379,redis-node-3:6379
      SPRING_RABBITMQ_HOST: haproxy-rabbitmq
      SPRING_RABBITMQ_PORT: 5672

  consumer-1:
    build:
      context: ./consumer-python
    container_name: python-consumer-1
    restart: always
    depends_on:
      - haproxy-rabbitmq
      - haproxy
    networks:
      - backend

  consumer-2:
    build:
      context: ./consumer-python
    container_name: python-consumer-2
    restart: always
    depends_on:
      - haproxy-rabbitmq
      - haproxy
    networks:
      - backend

  consumer-3:
    build:
      context: ./consumer-python
    container_name: python-consumer-3
    restart: always
    depends_on:
      - haproxy-rabbitmq
      - haproxy
    networks:
      - backend

  # Redis nodes e restante stack mantÃªm-se iguais ao que jÃ¡ tens
  redis-node-1:
    image: redis:7
    command: redis-server --cluster-enabled yes --cluster-config-file nodes.conf --cluster-node-timeout 5000 --save "" --appendonly no
    ports:
      - "7001:6379"
    networks:
      - backend

  redis-node-2:
    image: redis:7
    command: redis-server --cluster-enabled yes --cluster-config-file nodes.conf --cluster-node-timeout 5000 --save "" --appendonly no
    ports:
      - "7002:6379"
    networks:
      - backend

  redis-node-3:
    image: redis:7
    command: redis-server --cluster-enabled yes --cluster-config-file nodes.conf --cluster-node-timeout 5000 --save "" --appendonly no
    ports:
      - "7003:6379"
    networks:
      - backend

  redis-node-4:
    image: redis:7
    command: redis-server --cluster-enabled yes --cluster-config-file nodes.conf --cluster-node-timeout 5000 --save "" --appendonly no
    ports:
      - "7004:6379"
    networks:
      - backend

  redis-node-5:
    image: redis:7
    command: redis-server --cluster-enabled yes --cluster-config-file nodes.conf --cluster-node-timeout 5000 --save "" --appendonly no
    ports:
      - "7005:6379"
    networks:
      - backend

  redis-node-6:
    image: redis:7
    command: redis-server --cluster-enabled yes --cluster-config-file nodes.conf --cluster-node-timeout 5000 --save "" --appendonly no
    ports:
      - "7006:6379"
    networks:
      - backend

  redis-init:
    image: redis:7
    depends_on:
      - redis-node-1
      - redis-node-2
      - redis-node-3
      - redis-node-4
      - redis-node-5
      - redis-node-6
    entrypoint: ["sh", "-c", "echo 'A aguardar Redis...'; sleep 5; yes yes | redis-cli --cluster create redis-node-1:6379 redis-node-2:6379 redis-node-3:6379 redis-node-4:6379 redis-node-5:6379 redis-node-6:6379 --cluster-replicas 1; echo 'Cluster Redis criado.'"]
    networks:
      - backend

  rabbitmq-node1:
    image: rabbitmq:3.11-management
    hostname: rabbitmq-node1
    container_name: rabbitmq-node1
    environment:
      RABBITMQ_ERLANG_COOKIE: "supersecretcookie"
      RABBITMQ_DEFAULT_USER: guest
      RABBITMQ_DEFAULT_PASS: guest
    ports:
      - "5672:5672"
      - "15672:15672"
    volumes:
      - rabbitmq-data-node1:/var/lib/rabbitmq
    networks:
      - backend

  rabbitmq-node2:
    image: rabbitmq:3.11-management
    hostname: rabbitmq-node2
    container_name: rabbitmq-node2
    environment:
      RABBITMQ_ERLANG_COOKIE: "supersecretcookie"
      RABBITMQ_DEFAULT_USER: guest
      RABBITMQ_DEFAULT_PASS: guest
    volumes:
      - rabbitmq-data-node2:/var/lib/rabbitmq
    networks:
      - backend
    depends_on:
      - rabbitmq-node1

  rabbitmq-node3:
    image: rabbitmq:3.11-management
    hostname: rabbitmq-node3
    container_name: rabbitmq-node3
    environment:
      RABBITMQ_ERLANG_COOKIE: "supersecretcookie"
      RABBITMQ_DEFAULT_USER: guest
      RABBITMQ_DEFAULT_PASS: guest
    volumes:
      - rabbitmq-data-node3:/var/lib/rabbitmq
    networks:
      - backend
    depends_on:
      - rabbitmq-node1

  rabbitmq-cluster-init:
    image: rabbitmq:3.11-management
    container_name: rabbitmq-cluster-init
    depends_on:
      - rabbitmq-node1
      - rabbitmq-node2
      - rabbitmq-node3
    entrypoint: >
      /bin/sh -c "
        echo 'ðŸŸ¡ A aguardar RabbitMQ...';
        sleep 15;
        rabbitmqctl -n rabbit@rabbitmq-node2 stop_app;
        rabbitmqctl -n rabbit@rabbitmq-node2 join_cluster rabbit@rabbitmq-node1;
        rabbitmqctl -n rabbit@rabbitmq-node2 start_app;
        rabbitmqctl -n rabbit@rabbitmq-node3 stop_app;
        rabbitmqctl -n rabbit@rabbitmq-node3 join_cluster rabbit@rabbitmq-node1;
        rabbitmqctl -n rabbit@rabbitmq-node3 start_app;
        rabbitmqctl -n rabbit@rabbitmq-node1 set_policy quorum ".*" '{\"queue-type\":\"quorum\"}' --priority 0 --apply-to queues;
        echo 'âœ… Cluster RabbitMQ com Quorum Queues criado.';
      "
    networks:
      - backend

  haproxy-rabbitmq:
    image: haproxy:2.9
    container_name: haproxy-rabbitmq
    ports:
      - "5673:5672"
    volumes:
      - ./haproxy-rabbitmq.cfg:/usr/local/etc/haproxy/haproxy.cfg:ro
    depends_on:
      - rabbitmq-node1
      - rabbitmq-node2
      - rabbitmq-node3
    networks:
      - backend

  crdb1:
    image: cockroachdb/cockroach:v23.1.11
    command: start --insecure --join=crdb1,crdb2,crdb3
    hostname: crdb1
    ports:
      - "26257:26257"
      - "8080:8080"
    volumes:
      - crdb1-data:/cockroach/cockroach-data
    networks:
      - backend

  crdb2:
    image: cockroachdb/cockroach:v23.1.11
    command: start --insecure --join=crdb1,crdb2,crdb3
    hostname: crdb2
    ports:
      - "26258:26257"
      - "8081:8080"
    volumes:
      - crdb2-data:/cockroach/cockroach-data
    networks:
      - backend

  crdb3:
    image: cockroachdb/cockroach:v23.1.11
    command: start --insecure --join=crdb1,crdb2,crdb3
    hostname: crdb3
    ports:
      - "26259:26257"
      - "8082:8080"
    volumes:
      - crdb3-data:/cockroach/cockroach-data
    networks:
      - backend

  crdb-init:
    image: cockroachdb/cockroach:v23.1.11
    depends_on:
      - crdb1
    entrypoint: >
      /bin/sh -c "
        echo 'Initializing cluster...';
        cockroach init --insecure --host=crdb1 || echo 'Already initialized';
        cockroach sql --insecure --host=crdb1 -e 'CREATE DATABASE appdb;';
        echo 'Done.';
      "
    networks:
      - backend

  haproxy:
    image: haproxy:2.9
    ports:
      - "26256:26256"
    volumes:
      - ./haproxy.cfg:/usr/local/etc/haproxy/haproxy.cfg:ro
    depends_on:
      - crdb-init
    networks:
      - backend

volumes:
  crdb1-data:
  crdb2-data:
  crdb3-data:
  rabbitmq-data-node1:
  rabbitmq-data-node2:
  rabbitmq-data-node3:

networks:
  backend:
    driver: bridge
